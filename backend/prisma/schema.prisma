// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int             @id @default(autoincrement())
  username     String          @unique
  email        String          @unique
  password     String
  gender       String
  isLeader     Boolean         @default(false)
  profilePic   String?
  createAt     DateTime        @default(now())
  updateAt     DateTime        @updatedAt
  conversation Conversations[]
  sender       Message[]       @relation("sender")
  reciver      Message[]       @relation("reciver")
  pointtable   PointTable[]
  Teams        Teams[]

  @@map("users")
}

model Message {
  id             Int             @id @default(autoincrement())
  senderId       Int
  reciverId      Int
  message        String
  choice         String[]
  status         String          @default("sent")
  type           String?
  isChoice       Boolean         @default(false)
  selectedChoice String?
  isUsed         Boolean         @default(false)
  category       String?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sender         Users           @relation("sender", fields: [senderId], references: [id])
  reciver        Users           @relation("reciver", fields: [reciverId], references: [id])
  conversation   Conversations[]

  @@map("messages")
}

model Conversations {
  id           Int       @id @default(autoincrement())
  participants Users[]
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("conversations")
}

model Category {
  id                   Int          @id @default(autoincrement())
  category             String       @unique
  point                Int          @default(0)
  isLimit              Boolean      @default(true)
  MaxPlayerLimit       Int          @default(100)
  round                Int          @default(1)
  roundPlayedByPlayers Int          @default(0)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  pointtable           PointTable[]

  @@map("category")
}

model PointTable {
  id           Int      @id @default(autoincrement())
  userId       Int
  categoryId   Int
  point        Int      @default(10)
  pendingPoint Int?
  accepted     Boolean  @default(false)
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  category     Category @relation(fields: [categoryId], references: [id])
  users        Users    @relation(fields: [userId], references: [id])

  @@map("pointtable")
}

model Teams {
  id          Int      @id @default(autoincrement())
  leaderId    Int
  members     Users[]
  category    String
  totalPlayer Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("teams")
}
